apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: kn-service
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: cli
spec:
  description: >-
    This Task performs operations on a Knative Service

  params:
  - name: kn-image
    description: "kn CLI container image to run this task (NOTE: must have bash shell installed)"
    default: quay.io/mhildenb/kn-bash:latest
    # NOTE: the offical kn build does not have bash which is needed for argument manipulation below
  - name: ACTION
    description: "The service action to take.  If none specified this will be determined based on the existance of SERVICE_NAME (NOTE: only create or update supported)"
    default: ""
  - name: SERVICE_NAME
    description: The name of the service being deployed
  - name: IMAGE_TAG
    description: "The tag of the image resource to be deployed (default: latest)"
    default: latest
  - name: TARGET_PROJECT
    description: The name of the project to deploy the service to
  - name: CONCURRENCY_LIMIT
    description: The number of requests that can be in the service at once (default unbounded)
    default: "0"
  - name: ADDITIONAL_ARGS
    type: array
    description: kn CLI arguments to run
    default: []
  resources:
    inputs:
    - name: image
      type: image
  steps:
  - name: kn
    image: "$(params.kn-image)"
    args:
      - $(params.ADDITIONAL_ARGS)
    script: |
      #!/bin/bash
      set -euxo pipefail

      ADDITIONAL_ARGS=( "$@" )

      ACTION="$(params.ACTION)"
      if [[ -z "${ACTION}" ]]; then
        echo "Determining action based on state of services in $(params.TARGET_PROJECT)"
        if [[ -z "$(/ko-app/kn service describe $(params.SERVICE_NAME) -n $(params.TARGET_PROJECT) 2>/dev/null)" ]]; then
          ACTION="create"
        else
          ACTION="update"
        fi
      fi

      printf "Addl args are %s\n" "${ADDITIONAL_ARGS[@]}"

      /ko-app/kn service ${ACTION} $(params.SERVICE_NAME) -n $(params.TARGET_PROJECT) --image "$(resources.inputs.image.url):$(params.IMAGE_TAG)" \
        --concurrency-limit $(params.CONCURRENCY_LIMIT) --revision-name "{{.Service}}-{{.Generation}}" ${ADDITIONAL_ARGS[@]}